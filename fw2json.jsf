// Fireworks Extension: Command
// Create JSON from Fireworks PNG.
// version: 0.0.1
// auther: @littlebusters
// license: MIT

var console = console || {};
(function()
{
	var d = fw.getDocumentDOM();
	var fwJSON = {"documentMeta": {"grid" : {}}, "pages": []};
	var pageSetter = d.getPageSetter();
	var currentFilePath = d.filePathForSave.slice( 0, d.filePathForSave.lastIndexOf( '/' ) + 1 );
	var layerType = {
		"[object RectanglePrimitive]": "rectangle",
		"[object Text]": "text",
		"[object Path]": "path",
		"[object Group]": "layer group",
		"[object Instance]": "symbol",
		"[object SliceHotspot]": "slice",
		"[object Layer]": "layer",
		"[object Image]": "bitmap"
	}

	fwJSON.documentMeta.grid = {"gridSize": {"x": d.gridSize.x, "y": d.gridSize.y}};
	fwJSON.documentMeta.grid.gridOrigin = {"x": d.gridOrigin.x, "y": d.gridOrigin.y};
	fwJSON.documentMeta.pageCount = d.pagesCount;
	fwJSON.documentMeta.docName = d.docTitleWithoutExtension;

	for ( var pageIndex = 0; pageIndex < fwJSON.documentMeta.pageCount; pageIndex++ ) {
		pageSetter.pageNum = pageIndex;
		d = fw.getDocumentDOM();

		fwJSON.pages[pageIndex] = {};
		fwJSON.pages[pageIndex].pageName = d.pageName;
		fwJSON.pages[pageIndex].backgroundColor = d.backgroundColor;
		fwJSON.pages[pageIndex].width = d.width;
		fwJSON.pages[pageIndex].height = d.height;
		fwJSON.pages[pageIndex].guide = {"x": d.guides.hGuides, "y": d.guides.vGuides};
		fwJSON.pages[pageIndex].layers = [];

		console.log( fwJSON.pages[pageIndex].pageName );
		fwJSON.pages[pageIndex].layers = getLayerAttrs( d.layers );
	};

	console.log( fwJSON );

	// var folderURL = fw.browseForFolderURL( 'Choose Export Folder', currentFilePath);
	// var saveURL = folderURL + '/' + fwJSON.documentMeta.docName + '.json';
	// fw.textOutputEncoding = 'utf-8';
	// Files.createFile( saveURL, '.json', '');
	// var fileWrite = Files.open( saveURL, true );
	// // console.log( fwJSON );
	// // fileWrite.writeUTF8( 'test write' );
	// fileWrite.writeUTF8( fwJSON.toSource() );
	// fileWrite.close();

	// console.log( folderURL, saveURL );

	console.log( '-------------' );

	// console.log( fwJSON );

	function getLayerAttrs( _tgt ) {
		// console.log( '-> start' );
		var layerData = [];

		for ( var layerIndex = 0; layerIndex < _tgt.length; layerIndex++ ) {
			layerData[layerIndex] = {};
			layerData[layerIndex].layerName = _tgt[layerIndex].name;
			layerData[layerIndex].parentLayerNum = d.getParentLayerNum( layerIndex );

			console.log( layerData[layerIndex].layerName );
			layerData[layerIndex].elems = getElemAttrs( _tgt[layerIndex].elems );
		}

		return layerData;
	}

	var FwtoJSON = FwtoJSON || {};

	// FwtoJSON.prototype.getElemsData = function ( _tgt ) {

	// }
	function getElemAttrs( _tgt ) {
		// console.log( '-> start' );
		var elemData = [];

		for ( var childIndex = 0, elemIndex = 0 ; childIndex < _tgt.length; childIndex++ ) {
			// console.log( _tgt[childIndex].toString() );
			if ( '[object Layer]' != _tgt[childIndex].toString() ) {
				elemData[elemIndex] = {};
				elemData[elemIndex].type = layerType[_tgt[childIndex].toString()];
				elemData[elemIndex].name = _tgt[childIndex].name || elemData[elemIndex].type;
				elemData[elemIndex].width = _tgt[childIndex].width;
				elemData[elemIndex].height = _tgt[childIndex].height;
				elemData[elemIndex].top = _tgt[childIndex].top;
				elemData[elemIndex].left = _tgt[childIndex].left;
				elemData[elemIndex].blendMode = _tgt[childIndex].blendMode;
				elemData[elemIndex].opacity = _tgt[childIndex].opacity;
				elemData[elemIndex].visible = _tgt[childIndex].visible;
				// console.log( elemData[elemIndex].name, elemData[elemIndex].type, '/ gat basics--' );

				if ( 'layer group' != elemData[elemIndex].type 
					&& 'symbol' != elemData[elemIndex].type
					&& 'bitmap' != elemData[elemIndex].type
					&& 'slice' != elemData[elemIndex].type  ) {
					if ( null != _tgt[childIndex].pathAttributes.fill ) {
						elemData[elemIndex].fill = getFillAttrs( _tgt[childIndex].pathAttributes );
					}
				} else if ( 'slice' == elemData[elemIndex].type ) {
					elemData[elemIndex].exportOptions = getExportOptions( _tgt[childIndex].exportOptions );
				}
				if ( 'path' == elemData[elemIndex].type ) {
					elemData[elemIndex].bezierPath = getPathNodes( _tgt[childIndex].contours );
				}
				if ( 'text' == elemData[elemIndex].type ) {
					elemData[elemIndex].text = getTextAttrs( _tgt[childIndex].textRuns );
					elemData[elemIndex].text.autoKern = _tgt[childIndex].autoKern;
				}
				elemIndex++;
			}
		}
		// console.log( elemData );

		return elemData;
	}

	function getTextAttrs( _tgt ) {
		// console.log( '-> start' );
		var attrs = {};

		attrs.fontFace = _tgt.initialAttrs.face;
		attrs.fontSize = _tgt.initialAttrs.size.slice( 0, -2 );
		attrs.alignment = _tgt.initialAttrs.alignment;
		attrs.underline = _tgt.initialAttrs.underline;
		attrs.fillColor = _tgt.initialAttrs.fillColor;
		attrs.baselineShift = _tgt.initialAttrs.baselineShift;
		if ( 'percentage' == _tgt.initialAttrs.leadingMode ) {
			attrs.leading = attrs.fontSize * floorWithDigit( _tgt.initialAttrs.leading, 2 );
		} else {
			attrs.leading = _tgt.initialAttrs.leading;
		}

		attrs.textRuns = [];
		for ( var i = _tgt.textRuns.length - 1; i >= 0; i-- ) {
			attrs.textRuns[i] = {};
			attrs.textRuns[i].charactors = _tgt.textRuns[i].characters;
			attrs.textRuns[i].size = _tgt.textRuns[i].changedAttrs.size.slice( 0, -2 );
			attrs.textRuns[i].face = _tgt.textRuns[i].changedAttrs.face;
			attrs.textRuns[i].underline = _tgt.textRuns[i].changedAttrs.underline;
			attrs.textRuns[i].fillColor = _tgt.textRuns[i].changedAttrs.fillColor;
			attrs.textRuns[i].baselineShift = _tgt.textRuns[i].changedAttrs.baselineShift;
			if ( 'percentage' == _tgt.textRuns[i].changedAttrs.leadingMode ) {
				attrs.textRuns[i].leading = attrs.textRuns[i].size * floorWithDigit( _tgt.textRuns[i].changedAttrs.leading, 2 );
			} else {
				attrs.textRuns[i].leading = _tgt.initialAttrs.leading;
			}
		};
		
		return attrs;
	}
	//getTextAttrs( sel[0].textRuns );

	function getPathNodes( _tgt ) {
		// console.log( '-> start' );
		var attrs = [];

		for ( var i = _tgt.length - 1; i >= 0; i-- ) {
			attrs[i] = {};
			attrs[i].isClosed = _tgt[i].isClosed;
			attrs[i].nodes = [];
			for ( var j = _tgt[i].nodes.length - 1; j >= 0; j-- ) {
				attrs[i].nodes[j] = { "isCurvePoint": _tgt[i].nodes[j].isCurvePoint };
				attrs[i].nodes[j].ancherPointX = _tgt[i].nodes[j].x;
				attrs[i].nodes[j].ancherPointY = _tgt[i].nodes[j].y;
				attrs[i].nodes[j].succPointX = _tgt[i].nodes[j].succX;
				attrs[i].nodes[j].succPointY = _tgt[i].nodes[j].succY;
				attrs[i].nodes[j].predPointX = _tgt[i].nodes[j].predX;
				attrs[i].nodes[j].predPointY = _tgt[i].nodes[j].predY;
			};
		};

		return attrs;
	}
	//getPathNodes( sel[0].contours );

	function getExportOptions( _tgt ) {
		// console.log( '-> start' );
		var attrs = {};

		attrs.exportFormat = _tgt.exportFormat;
		attrs.jpegQuality = _tgt.jpegQuality;

		return attrs;
	}

	function getFillAttrs( _tgt ) {
		// console.log( '-> start' );
		var elemData = {};

		elemData.fillColor = _tgt.fillColor;
		elemData.feather = _tgt.fill.feather;
		if ( null != _tgt.fill.gradient ) {
			elemData.gradient = getGradientAtts( _tgt );
			elemData.gradientStops = getGradientStops( _tgt.fill.gradient );
		}

		return elemData;
	}

	function getGradientAtts( _tgt ) {
		// console.log( '-> start' );
		var elemData = {};

		elemData.gradientType = _tgt.fill.shape;
		elemData.gradientPointX = _tgt.fillHandle1.x;
		elemData.gradientPointY = _tgt.fillHandle1.y;
		elemData.gradientPointX = _tgt.fillHandle2.x;
		elemData.gradientPointY = _tgt.fillHandle2.y;
		elemData.gradientPointX = _tgt.fillHandle3.x;
		elemData.gradientPointY = _tgt.fillHandle3.y;

		// elemData.gradientStops = getGradientStops( _tgt.fill.gradient );

		return elemData;
	}

	function getGradientStops( _tgt ) {
		// console.log( '-> start' );
		var currentPoints = [];
		var optimazedPoints = [];

		for ( var i = _tgt.nodes.length - 1; i >= 0; i-- ) {
			currentPoints.push( _tgt.nodes[i] );
		};
		for ( var i = _tgt.opacityNodes.length - 1; i >= 0; i-- ) {
			currentPoints.push( _tgt.opacityNodes[i] );
		};

		// sort by gradient stop position
		for ( var i = 0; i < currentPoints.length - 1; i++ ) {
			for ( var j = currentPoints.length - 1; j > i; j-- ) {
				if ( currentPoints[j - 1].position > currentPoints[j].position ) {
					var exchenge = currentPoints[j - 1];
					currentPoints[j - 1] = currentPoints[j];
					currentPoints[j] = exchenge;
				}
			};
		};

		// get gradient attributes
		for ( var i = 0, index = 0; i < currentPoints.length; i++ ) {
			for ( var j = i; j < currentPoints.length; j++ ) {
				if ( !currentPoints[i].isOpacityNode ) {
					if ( currentPoints[j].isOpacityNode && currentPoints[i].position <= currentPoints[j].position ) {
						optimazedPoints[index] = {};
						optimazedPoints[index].color = currentPoints[i].color;
						optimazedPoints[index].position = currentPoints[i].position;
						if ( 9 == currentPoints[j].color.length ) {
							optimazedPoints[index].opacity = getOpacityByDigit( currentPoints[j].color.slice( 7, 9 ) );
						} else {
							optimazedPoints[index].opacity = 1;
						}
						index++;
						break;
					}
				} else if ( currentPoints[i - 1].position != currentPoints[i].position ) {
					var prevColor = nextColor = optimazedPoints[index - 1].color,
						nextPosition = 1;

					for ( var k = j; k < currentPoints.length; k++ ) {
						if ( !currentPoints[k].isOpacityNode ) {
							nextColor = currentPoints[k].color;
							nextPosition = currentPoints[k].position;
						} 
					}
					var localPosition = ( currentPoints[i].position - optimazedPoints[index - 1].position ) / nextPosition;
					if ( 1 == currentPoints[i].position ) {
						localPosition = 0.5;
					}

					optimazedPoints[index] = {};
					optimazedPoints[index].color = getGradientStopColorOnOpacitySide( prevColor, nextColor, localPosition );
					optimazedPoints[index].position = currentPoints[i].position;
					if ( 9 == currentPoints[i].color.length ) {
						optimazedPoints[index].opacity = getOpacityByDigit( currentPoints[i].color.slice( 7, 9 ) );
					} else {
						optimazedPoints[index].opacity = 1;
					}
					index++;
					break;
				}
			}
		}

		return optimazedPoints;
	}
	// getGradientStops( sel[0].pathAttributes.fill.gradient );

	// utilities
	function getGradientStopColorOnOpacitySide ( _prevC, _nextC, _posi ) {
		var r = ( hex2Digit( _prevC.slice( 1, 3 ) ) - 0 + ( hex2Digit( _nextC.slice( 1, 3 ) ) - 0 ) ) * _posi;
		var g = ( hex2Digit( _prevC.slice( 3, 5 ) ) - 0 + ( hex2Digit( _nextC.slice( 3, 5 ) ) - 0 ) ) * _posi;
		var b = ( hex2Digit( _prevC.slice( 5, 7 ) ) - 0 + ( hex2Digit( _nextC.slice( 5, 7 ) ) - 0 ) ) * _posi;
		
		r = digit2Hex( r );
		g = digit2Hex( g );
		b = digit2Hex( b );

		return '#' + r + g + b;
	}

	function floorWithDigit ( _val, _digit ) {
		var digit = Math.pow( 10, _digit );
		var val = _val * digit;

		return Math.floor( val ) / digit;
	}
	// floorWithDigit( 3.14567, 2 );
	function getOpacityByDigit ( _hex ) {
		var digit = ( parseInt( '0x' + _hex ).toString( 10 ) ) / 255;

		return floorWithDigit( digit, 2 );
	}
	function digit2Hex ( _digit ) {
		var hex = parseInt( _digit ).toString( 16 );
		if ( 1 == hex.length ) hex = '0' + hex;
		return hex;
	}
	function hex2Digit ( _hex ) {
		return ( parseInt( '0x' + _hex ).toString( 10 ) );
	}
	// getOpacityByDigit( 80 );

})();